// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: apis/llmgapi/v1/openai/service.proto

package openai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatCompletionServiceTier int32

const (
	ChatCompletionServiceTier_ChatCompletionServiceTierUnspecified ChatCompletionServiceTier = 0
	ChatCompletionServiceTier_ChatCompletionServiceTierScale       ChatCompletionServiceTier = 1
	ChatCompletionServiceTier_ChatCompletionServiceTierDefault     ChatCompletionServiceTier = 2
)

// Enum value maps for ChatCompletionServiceTier.
var (
	ChatCompletionServiceTier_name = map[int32]string{
		0: "ChatCompletionServiceTierUnspecified",
		1: "ChatCompletionServiceTierScale",
		2: "ChatCompletionServiceTierDefault",
	}
	ChatCompletionServiceTier_value = map[string]int32{
		"ChatCompletionServiceTierUnspecified": 0,
		"ChatCompletionServiceTierScale":       1,
		"ChatCompletionServiceTierDefault":     2,
	}
)

func (x ChatCompletionServiceTier) Enum() *ChatCompletionServiceTier {
	p := new(ChatCompletionServiceTier)
	*p = x
	return p
}

func (x ChatCompletionServiceTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCompletionServiceTier) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_llmgapi_v1_openai_service_proto_enumTypes[0].Descriptor()
}

func (ChatCompletionServiceTier) Type() protoreflect.EnumType {
	return &file_apis_llmgapi_v1_openai_service_proto_enumTypes[0]
}

func (x ChatCompletionServiceTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCompletionServiceTier.Descriptor instead.
func (ChatCompletionServiceTier) EnumDescriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{0}
}

type ChatCompletionFinishReason int32

const (
	ChatCompletionFinishReason_ChatCompletionFinishReasonUnspecified   ChatCompletionFinishReason = 0
	ChatCompletionFinishReason_ChatCompletionFinishReasonStop          ChatCompletionFinishReason = 1
	ChatCompletionFinishReason_ChatCompletionFinishReasonLength        ChatCompletionFinishReason = 2
	ChatCompletionFinishReason_ChatCompletionFinishReasonToolCalls     ChatCompletionFinishReason = 3
	ChatCompletionFinishReason_ChatCompletionFinishReasonContentFilter ChatCompletionFinishReason = 4
	ChatCompletionFinishReason_ChatCompletionFinishReasonFunctionCall  ChatCompletionFinishReason = 5
	ChatCompletionFinishReason_ChatCompletionFinishReasonNull          ChatCompletionFinishReason = 6
)

// Enum value maps for ChatCompletionFinishReason.
var (
	ChatCompletionFinishReason_name = map[int32]string{
		0: "ChatCompletionFinishReasonUnspecified",
		1: "ChatCompletionFinishReasonStop",
		2: "ChatCompletionFinishReasonLength",
		3: "ChatCompletionFinishReasonToolCalls",
		4: "ChatCompletionFinishReasonContentFilter",
		5: "ChatCompletionFinishReasonFunctionCall",
		6: "ChatCompletionFinishReasonNull",
	}
	ChatCompletionFinishReason_value = map[string]int32{
		"ChatCompletionFinishReasonUnspecified":   0,
		"ChatCompletionFinishReasonStop":          1,
		"ChatCompletionFinishReasonLength":        2,
		"ChatCompletionFinishReasonToolCalls":     3,
		"ChatCompletionFinishReasonContentFilter": 4,
		"ChatCompletionFinishReasonFunctionCall":  5,
		"ChatCompletionFinishReasonNull":          6,
	}
)

func (x ChatCompletionFinishReason) Enum() *ChatCompletionFinishReason {
	p := new(ChatCompletionFinishReason)
	*p = x
	return p
}

func (x ChatCompletionFinishReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCompletionFinishReason) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_llmgapi_v1_openai_service_proto_enumTypes[1].Descriptor()
}

func (ChatCompletionFinishReason) Type() protoreflect.EnumType {
	return &file_apis_llmgapi_v1_openai_service_proto_enumTypes[1]
}

func (x ChatCompletionFinishReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCompletionFinishReason.Descriptor instead.
func (ChatCompletionFinishReason) EnumDescriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{1}
}

type ChatCompletionMessageToolCallType int32

const (
	ChatCompletionMessageToolCallType_ChatCompletionMessageToolCallTypeUnspecified ChatCompletionMessageToolCallType = 0
	ChatCompletionMessageToolCallType_ChatCompletionMessageToolCallTypeFunction    ChatCompletionMessageToolCallType = 1
)

// Enum value maps for ChatCompletionMessageToolCallType.
var (
	ChatCompletionMessageToolCallType_name = map[int32]string{
		0: "ChatCompletionMessageToolCallTypeUnspecified",
		1: "ChatCompletionMessageToolCallTypeFunction",
	}
	ChatCompletionMessageToolCallType_value = map[string]int32{
		"ChatCompletionMessageToolCallTypeUnspecified": 0,
		"ChatCompletionMessageToolCallTypeFunction":    1,
	}
)

func (x ChatCompletionMessageToolCallType) Enum() *ChatCompletionMessageToolCallType {
	p := new(ChatCompletionMessageToolCallType)
	*p = x
	return p
}

func (x ChatCompletionMessageToolCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCompletionMessageToolCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_llmgapi_v1_openai_service_proto_enumTypes[2].Descriptor()
}

func (ChatCompletionMessageToolCallType) Type() protoreflect.EnumType {
	return &file_apis_llmgapi_v1_openai_service_proto_enumTypes[2]
}

func (x ChatCompletionMessageToolCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCompletionMessageToolCallType.Descriptor instead.
func (ChatCompletionMessageToolCallType) EnumDescriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{2}
}

type ChatCompletionMessageContentPartImageType int32

const (
	ChatCompletionMessageContentPartImageType_ChatCompletionMessageContentPartImageTypeUnspecified ChatCompletionMessageContentPartImageType = 0
	ChatCompletionMessageContentPartImageType_ChatCompletionMessageContentPartImageTypeURL         ChatCompletionMessageContentPartImageType = 1
)

// Enum value maps for ChatCompletionMessageContentPartImageType.
var (
	ChatCompletionMessageContentPartImageType_name = map[int32]string{
		0: "ChatCompletionMessageContentPartImageTypeUnspecified",
		1: "ChatCompletionMessageContentPartImageTypeURL",
	}
	ChatCompletionMessageContentPartImageType_value = map[string]int32{
		"ChatCompletionMessageContentPartImageTypeUnspecified": 0,
		"ChatCompletionMessageContentPartImageTypeURL":         1,
	}
)

func (x ChatCompletionMessageContentPartImageType) Enum() *ChatCompletionMessageContentPartImageType {
	p := new(ChatCompletionMessageContentPartImageType)
	*p = x
	return p
}

func (x ChatCompletionMessageContentPartImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCompletionMessageContentPartImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_llmgapi_v1_openai_service_proto_enumTypes[3].Descriptor()
}

func (ChatCompletionMessageContentPartImageType) Type() protoreflect.EnumType {
	return &file_apis_llmgapi_v1_openai_service_proto_enumTypes[3]
}

func (x ChatCompletionMessageContentPartImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCompletionMessageContentPartImageType.Descriptor instead.
func (ChatCompletionMessageContentPartImageType) EnumDescriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{3}
}

type ChatCompletionMessageContentPartImageDetail int32

const (
	ChatCompletionMessageContentPartImageDetail_ChatCompletionMessageContentPartImageDetailUnspecified ChatCompletionMessageContentPartImageDetail = 0
	ChatCompletionMessageContentPartImageDetail_ChatCompletionMessageContentPartImageDetailAuto        ChatCompletionMessageContentPartImageDetail = 1
	ChatCompletionMessageContentPartImageDetail_ChatCompletionMessageContentPartImageDetailLow         ChatCompletionMessageContentPartImageDetail = 2
	ChatCompletionMessageContentPartImageDetail_ChatCompletionMessageContentPartImageDetailHigh        ChatCompletionMessageContentPartImageDetail = 3
)

// Enum value maps for ChatCompletionMessageContentPartImageDetail.
var (
	ChatCompletionMessageContentPartImageDetail_name = map[int32]string{
		0: "ChatCompletionMessageContentPartImageDetailUnspecified",
		1: "ChatCompletionMessageContentPartImageDetailAuto",
		2: "ChatCompletionMessageContentPartImageDetailLow",
		3: "ChatCompletionMessageContentPartImageDetailHigh",
	}
	ChatCompletionMessageContentPartImageDetail_value = map[string]int32{
		"ChatCompletionMessageContentPartImageDetailUnspecified": 0,
		"ChatCompletionMessageContentPartImageDetailAuto":        1,
		"ChatCompletionMessageContentPartImageDetailLow":         2,
		"ChatCompletionMessageContentPartImageDetailHigh":        3,
	}
)

func (x ChatCompletionMessageContentPartImageDetail) Enum() *ChatCompletionMessageContentPartImageDetail {
	p := new(ChatCompletionMessageContentPartImageDetail)
	*p = x
	return p
}

func (x ChatCompletionMessageContentPartImageDetail) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCompletionMessageContentPartImageDetail) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_llmgapi_v1_openai_service_proto_enumTypes[4].Descriptor()
}

func (ChatCompletionMessageContentPartImageDetail) Type() protoreflect.EnumType {
	return &file_apis_llmgapi_v1_openai_service_proto_enumTypes[4]
}

func (x ChatCompletionMessageContentPartImageDetail) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCompletionMessageContentPartImageDetail.Descriptor instead.
func (ChatCompletionMessageContentPartImageDetail) EnumDescriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{4}
}

// CreateChatCompletionRequest represents the parameters for creating a chat completion.
type CreateChatCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of messages comprising the conversation so far.
	Messages []*ChatCompletionMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
	// table for details on which models work with the Chat API.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
	// decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty *float32 `protobuf:"fixed32,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the
	// tokenizer) to an associated bias value from -100 to 100. Mathematically, the
	// bias is added to the logits generated by the model prior to sampling. The exact
	// effect will vary per model, but values between -1 and 1 should decrease or
	// increase likelihood of selection; values like -100 or 100 should result in a ban
	// or exclusive selection of the relevant token.
	LogitBias map[string]int64 `protobuf:"bytes,4,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Whether to return log probabilities of the output tokens or not. If true,
	// returns the log probabilities of each output token returned in the `content` of
	// `message`.
	LogProbs *bool `protobuf:"varint,5,opt,name=log_probs,json=logProbs,proto3,oneof" json:"log_probs,omitempty"`
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	// `logprobs` must be set to `true` if this parameter is used.
	TopLogProbs *int64 `protobuf:"varint,6,opt,name=top_log_probs,json=topLogProbs,proto3,oneof" json:"top_log_probs,omitempty"`
	// The maximum number of tokens that can be generated in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's
	// context length.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
	// for counting tokens.
	MaxTokens *int64 `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// How many chat completion choices to generate for each input message. Note that
	// you will be charged based on the number of generated tokens across all of the
	// choices. Keep `n` as `1` to minimize costs.
	N *int64 `protobuf:"varint,8,opt,name=n,proto3,oneof" json:"n,omitempty"`
	// Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
	// during tool use.
	ParallelToolCalls *bool `protobuf:"varint,9,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3,oneof" json:"parallel_tool_calls,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
	// whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `protobuf:"fixed32,10,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`
	// An object specifying the format that the model must output. Compatible with
	// [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
	// all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
	// message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to
	// produce JSON yourself via a system or user message. Without this, the model may
	// generate an unending stream of whitespace until the generation reaches the token
	// limit, resulting in a long-running and seemingly "stuck" request. Also note that
	// the message content may be partially cut off if `finish_reason="length"`, which
	// indicates the generation exceeded `max_tokens` or the conversation exceeded the
	// max context length.
	ResponseFormat *ChatCompletionResponseFormat `protobuf:"bytes,11,opt,name=response_format,json=responseFormat,proto3,oneof" json:"response_format,omitempty"`
	// This feature is in Beta. If specified, our system will make a best effort to
	// sample deterministically, such that repeated requests with the same `seed` and
	// parameters should return the same result. Determinism is not guaranteed, and you
	// should refer to the `system_fingerprint` response parameter to monitor changes
	// in the backend.
	Seed *int64 `protobuf:"varint,12,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	// Specifies the latency tier to use for processing the request. This parameter is
	// relevant for customers subscribed to the scale tier service:
	//
	//   - If set to 'auto', the system will utilize scale tier credits until they are
	//     exhausted.
	//   - If set to 'default', the request will be processed using the default service
	//     tier with a lower uptime SLA and no latency guarentee.
	//   - When not set, the default behavior is 'auto'.
	//
	// When this parameter is set, the response body will include the `service_tier`
	// utilized.
	ServiceTier *ChatCompletionServiceTier `protobuf:"varint,13,opt,name=service_tier,json=serviceTier,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionServiceTier,oneof" json:"service_tier,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop      *string  `protobuf:"bytes,14,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
	StopArray []string `protobuf:"bytes,15,rep,name=stop_array,json=stopArray,proto3" json:"stop_array,omitempty"`
	// What sampling temperature to use, between 0 and 2.
	Temperature *float32 `protobuf:"fixed32,16,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Controls which (if any) tool is called by the model. `none` means the model will
	// not call any tool and instead generates a message. `auto` means the model can
	// pick between generating a message or calling one or more tools. `required` means
	// the model must call one or more tools. Specifying a particular tool via
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to
	// call that tool.
	//
	// `none` is the default when no tools are present. `auto` is the default if tools
	// are present.
	ToolChoice *ChatCompletionToolChoiceOption `protobuf:"bytes,17,opt,name=tool_choice,json=toolChoice,proto3,oneof" json:"tool_choice,omitempty"`
	// A list of tools the model may call. Currently, only functions are supported as a
	// tool. Use this to provide a list of functions the model may generate JSON inputs
	// for. A max of 128 functions are supported.
	Tools []*ChatCompletionTool `protobuf:"bytes,18,rep,name=tools,proto3" json:"tools,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the
	// model considers the results of the tokens with top_p probability mass. So 0.1
	// means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `protobuf:"fixed32,19,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor
	// and detect abuse.
	// [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
	User *string `protobuf:"bytes,20,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *CreateChatCompletionRequest) Reset() {
	*x = CreateChatCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest) ProtoMessage() {}

func (x *CreateChatCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChatCompletionRequest) GetMessages() []*ChatCompletionMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateChatCompletionRequest) GetFrequencyPenalty() float32 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetLogitBias() map[string]int64 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetLogProbs() bool {
	if x != nil && x.LogProbs != nil {
		return *x.LogProbs
	}
	return false
}

func (x *CreateChatCompletionRequest) GetTopLogProbs() int64 {
	if x != nil && x.TopLogProbs != nil {
		return *x.TopLogProbs
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetMaxTokens() int64 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetN() int64 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetParallelToolCalls() bool {
	if x != nil && x.ParallelToolCalls != nil {
		return *x.ParallelToolCalls
	}
	return false
}

func (x *CreateChatCompletionRequest) GetPresencePenalty() float32 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetResponseFormat() *ChatCompletionResponseFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetSeed() int64 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetServiceTier() ChatCompletionServiceTier {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ChatCompletionServiceTier_ChatCompletionServiceTierUnspecified
}

func (x *CreateChatCompletionRequest) GetStop() string {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return ""
}

func (x *CreateChatCompletionRequest) GetStopArray() []string {
	if x != nil {
		return x.StopArray
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetToolChoice() *ChatCompletionToolChoiceOption {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetTools() []*ChatCompletionTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

// CreateChatCompletionRequest represents the parameters for creating a chat completion.
type CreateChatCompletionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of messages comprising the conversation so far.
	Messages []*ChatCompletionMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
	// table for details on which models work with the Chat API.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
	// decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty *float32 `protobuf:"fixed32,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the
	// tokenizer) to an associated bias value from -100 to 100. Mathematically, the
	// bias is added to the logits generated by the model prior to sampling. The exact
	// effect will vary per model, but values between -1 and 1 should decrease or
	// increase likelihood of selection; values like -100 or 100 should result in a ban
	// or exclusive selection of the relevant token.
	LogitBias map[string]int64 `protobuf:"bytes,4,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Whether to return log probabilities of the output tokens or not. If true,
	// returns the log probabilities of each output token returned in the `content` of
	// `message`.
	LogProbs *bool `protobuf:"varint,5,opt,name=log_probs,json=logProbs,proto3,oneof" json:"log_probs,omitempty"`
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	// `logprobs` must be set to `true` if this parameter is used.
	TopLogProbs *int64 `protobuf:"varint,6,opt,name=top_log_probs,json=topLogProbs,proto3,oneof" json:"top_log_probs,omitempty"`
	// The maximum number of tokens that can be generated in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's
	// context length.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
	// for counting tokens.
	MaxTokens *int64 `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// How many chat completion choices to generate for each input message. Note that
	// you will be charged based on the number of generated tokens across all of the
	// choices. Keep `n` as `1` to minimize costs.
	N *int64 `protobuf:"varint,8,opt,name=n,proto3,oneof" json:"n,omitempty"`
	// Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
	// during tool use.
	ParallelToolCalls *bool `protobuf:"varint,9,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3,oneof" json:"parallel_tool_calls,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
	// whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
	PresencePenalty *float32 `protobuf:"fixed32,10,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`
	// An object specifying the format that the model must output. Compatible with
	// [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
	// all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
	// message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to
	// produce JSON yourself via a system or user message. Without this, the model may
	// generate an unending stream of whitespace until the generation reaches the token
	// limit, resulting in a long-running and seemingly "stuck" request. Also note that
	// the message content may be partially cut off if `finish_reason="length"`, which
	// indicates the generation exceeded `max_tokens` or the conversation exceeded the
	// max context length.
	ResponseFormat *ChatCompletionResponseFormat `protobuf:"bytes,11,opt,name=response_format,json=responseFormat,proto3,oneof" json:"response_format,omitempty"`
	// This feature is in Beta. If specified, our system will make a best effort to
	// sample deterministically, such that repeated requests with the same `seed` and
	// parameters should return the same result. Determinism is not guaranteed, and you
	// should refer to the `system_fingerprint` response parameter to monitor changes
	// in the backend.
	Seed *int64 `protobuf:"varint,12,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	// Specifies the latency tier to use for processing the request. This parameter is
	// relevant for customers subscribed to the scale tier service:
	//
	//   - If set to 'auto', the system will utilize scale tier credits until they are
	//     exhausted.
	//   - If set to 'default', the request will be processed using the default service
	//     tier with a lower uptime SLA and no latency guarentee.
	//   - When not set, the default behavior is 'auto'.
	//
	// When this parameter is set, the response body will include the `service_tier`
	// utilized.
	ServiceTier *ChatCompletionServiceTier `protobuf:"varint,13,opt,name=service_tier,json=serviceTier,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionServiceTier,oneof" json:"service_tier,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop      *string  `protobuf:"bytes,14,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
	StopArray []string `protobuf:"bytes,15,rep,name=stop_array,json=stopArray,proto3" json:"stop_array,omitempty"`
	// Options for streaming response. Only set this when you call CreateChatCompletionStream.
	StreamOptions *ChatCompletionStreamOptions `protobuf:"bytes,16,opt,name=stream_options,json=streamOptions,proto3,oneof" json:"stream_options,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
	// make the output more random, while lower values like 0.2 will make it more
	// focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `protobuf:"fixed32,17,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Controls which (if any) tool is called by the model. `none` means the model will
	// not call any tool and instead generates a message. `auto` means the model can
	// pick between generating a message or calling one or more tools. `required` means
	// the model must call one or more tools. Specifying a particular tool via
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to
	// call that tool.
	//
	// `none` is the default when no tools are present. `auto` is the default if tools
	// are present.
	ToolChoice *ChatCompletionToolChoiceOption `protobuf:"bytes,18,opt,name=tool_choice,json=toolChoice,proto3,oneof" json:"tool_choice,omitempty"`
	// A list of tools the model may call. Currently, only functions are supported as a
	// tool. Use this to provide a list of functions the model may generate JSON inputs
	// for. A max of 128 functions are supported.
	Tools []*ChatCompletionTool `protobuf:"bytes,19,rep,name=tools,proto3" json:"tools,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the
	// model considers the results of the tokens with top_p probability mass. So 0.1
	// means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `protobuf:"fixed32,20,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor
	// and detect abuse.
	// [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
	User *string `protobuf:"bytes,21,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *CreateChatCompletionStreamRequest) Reset() {
	*x = CreateChatCompletionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionStreamRequest) ProtoMessage() {}

func (x *CreateChatCompletionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionStreamRequest) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChatCompletionStreamRequest) GetMessages() []*ChatCompletionMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateChatCompletionStreamRequest) GetFrequencyPenalty() float32 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetLogitBias() map[string]int64 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetLogProbs() bool {
	if x != nil && x.LogProbs != nil {
		return *x.LogProbs
	}
	return false
}

func (x *CreateChatCompletionStreamRequest) GetTopLogProbs() int64 {
	if x != nil && x.TopLogProbs != nil {
		return *x.TopLogProbs
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetMaxTokens() int64 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetN() int64 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetParallelToolCalls() bool {
	if x != nil && x.ParallelToolCalls != nil {
		return *x.ParallelToolCalls
	}
	return false
}

func (x *CreateChatCompletionStreamRequest) GetPresencePenalty() float32 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetResponseFormat() *ChatCompletionResponseFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetSeed() int64 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetServiceTier() ChatCompletionServiceTier {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ChatCompletionServiceTier_ChatCompletionServiceTierUnspecified
}

func (x *CreateChatCompletionStreamRequest) GetStop() string {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return ""
}

func (x *CreateChatCompletionStreamRequest) GetStopArray() []string {
	if x != nil {
		return x.StopArray
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetStreamOptions() *ChatCompletionStreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetToolChoice() *ChatCompletionToolChoiceOption {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetTools() []*ChatCompletionTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateChatCompletionStreamRequest) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *CreateChatCompletionStreamRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

type ChatCompletionStreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, an additional chunk will be streamed before the `data: [DONE]` message.
	// The `usage` field on this chunk shows the token usage statistics for the entire
	// request, and the `choices` field will always be an empty array. All other chunks
	// will also include a `usage` field, but with a null value.
	IncludeUsage *bool `protobuf:"varint,1,opt,name=include_usage,json=includeUsage,proto3,oneof" json:"include_usage,omitempty"`
}

func (x *ChatCompletionStreamOptions) Reset() {
	*x = ChatCompletionStreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionStreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionStreamOptions) ProtoMessage() {}

func (x *ChatCompletionStreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionStreamOptions.ProtoReflect.Descriptor instead.
func (*ChatCompletionStreamOptions) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{2}
}

func (x *ChatCompletionStreamOptions) GetIncludeUsage() bool {
	if x != nil && x.IncludeUsage != nil {
		return *x.IncludeUsage
	}
	return false
}

// ChatCompletion represents a chat completion response returned by the model.
type CreateChatCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the chat completion.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A list of chat completion choices. Can be more than one if n is greater than 1.
	Choices []*ChatCompletionChoice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	// The Unix timestamp (in seconds) of when the chat completion was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// The model used for the chat completion.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// The object type, which is always "chat.completion".
	Object string `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	// The service tier used for processing the request.
	ServiceTier *ChatCompletionServiceTier `protobuf:"varint,6,opt,name=service_tier,json=serviceTier,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionServiceTier,oneof" json:"service_tier,omitempty"`
	// This fingerprint represents the backend configuration that the model runs with.
	SystemFingerprint *string `protobuf:"bytes,7,opt,name=system_fingerprint,json=systemFingerprint,proto3,oneof" json:"system_fingerprint,omitempty"`
	// ChatCompletionUsage statistics for the completion request.
	Usage *ChatCompletionUsage `protobuf:"bytes,8,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *CreateChatCompletionResponse) Reset() {
	*x = CreateChatCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionResponse) ProtoMessage() {}

func (x *CreateChatCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionResponse.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionResponse) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChatCompletionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChatCompletionResponse) GetChoices() []*ChatCompletionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CreateChatCompletionResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreateChatCompletionResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateChatCompletionResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *CreateChatCompletionResponse) GetServiceTier() ChatCompletionServiceTier {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ChatCompletionServiceTier_ChatCompletionServiceTierUnspecified
}

func (x *CreateChatCompletionResponse) GetSystemFingerprint() string {
	if x != nil && x.SystemFingerprint != nil {
		return *x.SystemFingerprint
	}
	return ""
}

func (x *CreateChatCompletionResponse) GetUsage() *ChatCompletionUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// ChatCompletionChoice represents a single completion choice in the chat completion response.
type ChatCompletionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reason the model stopped generating tokens. This will be `stop` if the model
	// hit a natural stop point or a provided stop sequence, `length` if the maximum
	// number of tokens specified in the request was reached, `content_filter` if
	// content was omitted due to a flag from our content filters, `tool_calls` if the
	// model called a tool, or `function_call` (deprecated) if the model called a
	// function.
	FinishReason ChatCompletionFinishReason `protobuf:"varint,1,opt,name=finish_reason,json=finishReason,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionFinishReason" json:"finish_reason,omitempty"`
	// The index of the choice in the list of choices.
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// Log probability information for the choice.
	LogProbs *ChatCompletionChoiceLogProbs `protobuf:"bytes,3,opt,name=log_probs,json=logProbs,proto3,oneof" json:"log_probs,omitempty"`
	// A chat completion message generated by the model.
	Message *ChatCompletionMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatCompletionChoice) Reset() {
	*x = ChatCompletionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChoice) ProtoMessage() {}

func (x *ChatCompletionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChoice.ProtoReflect.Descriptor instead.
func (*ChatCompletionChoice) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{4}
}

func (x *ChatCompletionChoice) GetFinishReason() ChatCompletionFinishReason {
	if x != nil {
		return x.FinishReason
	}
	return ChatCompletionFinishReason_ChatCompletionFinishReasonUnspecified
}

func (x *ChatCompletionChoice) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionChoice) GetLogProbs() *ChatCompletionChoiceLogProbs {
	if x != nil {
		return x.LogProbs
	}
	return nil
}

func (x *ChatCompletionChoice) GetMessage() *ChatCompletionMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// ChatCompletionChoiceLogprobs contains log probability information for a completion choice.
type ChatCompletionChoiceLogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of message content tokens with log probability information.
	Content []*ChatCompletionTokenLogProb `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *ChatCompletionChoiceLogProbs) Reset() {
	*x = ChatCompletionChoiceLogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChoiceLogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChoiceLogProbs) ProtoMessage() {}

func (x *ChatCompletionChoiceLogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChoiceLogProbs.ProtoReflect.Descriptor instead.
func (*ChatCompletionChoiceLogProbs) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{5}
}

func (x *ChatCompletionChoiceLogProbs) GetContent() []*ChatCompletionTokenLogProb {
	if x != nil {
		return x.Content
	}
	return nil
}

// ChatCompletionMessageToolCall represents a tool call made by the model.
type ChatCompletionMessageToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the tool call.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the tool. Currently, only "function" is supported.
	Type ChatCompletionMessageToolCallType `protobuf:"varint,2,opt,name=type,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionMessageToolCallType" json:"type,omitempty"`
	// The function that the model called.
	Function *ChatCompletionMessageToolCallFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ChatCompletionMessageToolCall) Reset() {
	*x = ChatCompletionMessageToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageToolCall) ProtoMessage() {}

func (x *ChatCompletionMessageToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageToolCall.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageToolCall) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{6}
}

func (x *ChatCompletionMessageToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionMessageToolCall) GetType() ChatCompletionMessageToolCallType {
	if x != nil {
		return x.Type
	}
	return ChatCompletionMessageToolCallType_ChatCompletionMessageToolCallTypeUnspecified
}

func (x *ChatCompletionMessageToolCall) GetFunction() *ChatCompletionMessageToolCallFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

// ChatCompletionChunkToolCall represents a tool call made by the model.
type ChatCompletionChunkDeltaToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The ID of the tool call.
	Id *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The function that the model called.
	Function *ChatCompletionMessageToolCallFunction `protobuf:"bytes,3,opt,name=function,proto3,oneof" json:"function,omitempty"`
	// The type of the tool. Currently, only "function" is supported.
	Type *ChatCompletionMessageToolCallType `protobuf:"varint,4,opt,name=type,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionMessageToolCallType,oneof" json:"type,omitempty"`
}

func (x *ChatCompletionChunkDeltaToolCall) Reset() {
	*x = ChatCompletionChunkDeltaToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunkDeltaToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunkDeltaToolCall) ProtoMessage() {}

func (x *ChatCompletionChunkDeltaToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunkDeltaToolCall.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunkDeltaToolCall) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{7}
}

func (x *ChatCompletionChunkDeltaToolCall) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionChunkDeltaToolCall) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ChatCompletionChunkDeltaToolCall) GetFunction() *ChatCompletionMessageToolCallFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ChatCompletionChunkDeltaToolCall) GetType() ChatCompletionMessageToolCallType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChatCompletionMessageToolCallType_ChatCompletionMessageToolCallTypeUnspecified
}

// ChatCompletionMessageToolCallFunction represents the details of a function call made by the model.
type ChatCompletionMessageToolCallFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the function to call.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The arguments to call the function with, as generated by the model in JSON format.
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ChatCompletionMessageToolCallFunction) Reset() {
	*x = ChatCompletionMessageToolCallFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageToolCallFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageToolCallFunction) ProtoMessage() {}

func (x *ChatCompletionMessageToolCallFunction) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageToolCallFunction.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageToolCallFunction) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{8}
}

func (x *ChatCompletionMessageToolCallFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatCompletionMessageToolCallFunction) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// ChatCompletionChunk represents a streamed chunk of a chat completion response.
type CreateChatCompletionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the chat completion. Each chunk has the same ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A list of chat completion choices. Can contain more than one element if n is greater than 1.
	Choices []*ChatCompletionChunkChoice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	// The Unix timestamp (in seconds) of when the chat completion chunk was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// The model used to generate the completion.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// The object type, which is always "chat.completion.chunk".
	Object string `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	// The service tier used for processing the request.
	ServiceTier *ChatCompletionServiceTier `protobuf:"varint,6,opt,name=service_tier,json=serviceTier,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionServiceTier,oneof" json:"service_tier,omitempty"`
	// This fingerprint represents the backend configuration that the model runs with.
	SystemFingerprint *string `protobuf:"bytes,7,opt,name=system_fingerprint,json=systemFingerprint,proto3,oneof" json:"system_fingerprint,omitempty"`
	// Token usage statistics for the entire request. Only present in the final chunk.
	Usage *ChatCompletionUsage `protobuf:"bytes,8,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *CreateChatCompletionStreamResponse) Reset() {
	*x = CreateChatCompletionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionStreamResponse) ProtoMessage() {}

func (x *CreateChatCompletionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionStreamResponse) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateChatCompletionStreamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChatCompletionStreamResponse) GetChoices() []*ChatCompletionChunkChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CreateChatCompletionStreamResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CreateChatCompletionStreamResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateChatCompletionStreamResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *CreateChatCompletionStreamResponse) GetServiceTier() ChatCompletionServiceTier {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ChatCompletionServiceTier_ChatCompletionServiceTierUnspecified
}

func (x *CreateChatCompletionStreamResponse) GetSystemFingerprint() string {
	if x != nil && x.SystemFingerprint != nil {
		return *x.SystemFingerprint
	}
	return ""
}

func (x *CreateChatCompletionStreamResponse) GetUsage() *ChatCompletionUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// ChatCompletionChunkChoice represents a single completion choice in a streamed chat completion chunk.
type ChatCompletionChunkChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content delta for this chunk.
	Delta *ChatCompletionChunkChoiceDelta `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	// The reason the model stopped generating tokens. This will be `stop` if the model
	// hit a natural stop point or a provided stop sequence, `length` if the maximum
	// number of tokens specified in the request was reached, `content_filter` if
	// content was omitted due to a flag from our content filters, `tool_calls` if the
	// model called a tool, or `function_call` (deprecated) if the model called a
	// function.
	FinishReason *ChatCompletionFinishReason `protobuf:"varint,2,opt,name=finish_reason,json=finishReason,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionFinishReason,oneof" json:"finish_reason,omitempty"`
	// The index of the choice in the list of choices.
	Index int64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// Log probability information for the choice.
	Logprobs *ChatCompletionChoiceLogProbs `protobuf:"bytes,4,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
}

func (x *ChatCompletionChunkChoice) Reset() {
	*x = ChatCompletionChunkChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunkChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunkChoice) ProtoMessage() {}

func (x *ChatCompletionChunkChoice) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunkChoice.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunkChoice) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{10}
}

func (x *ChatCompletionChunkChoice) GetDelta() *ChatCompletionChunkChoiceDelta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ChatCompletionChunkChoice) GetFinishReason() ChatCompletionFinishReason {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ChatCompletionFinishReason_ChatCompletionFinishReasonUnspecified
}

func (x *ChatCompletionChunkChoice) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionChunkChoice) GetLogprobs() *ChatCompletionChoiceLogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

// ChatCompletionChunkChoiceDelta represents the content delta in a stream response.
type ChatCompletionChunkChoiceDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content delta.
	Content *string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
	// Role of the message author (if changed).
	Role *string `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	// Tool calls in this delta.
	ToolCalls []*ChatCompletionChunkDeltaToolCall `protobuf:"bytes,3,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *ChatCompletionChunkChoiceDelta) Reset() {
	*x = ChatCompletionChunkChoiceDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunkChoiceDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunkChoiceDelta) ProtoMessage() {}

func (x *ChatCompletionChunkChoiceDelta) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunkChoiceDelta.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunkChoiceDelta) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{11}
}

func (x *ChatCompletionChunkChoiceDelta) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ChatCompletionChunkChoiceDelta) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *ChatCompletionChunkChoiceDelta) GetToolCalls() []*ChatCompletionChunkDeltaToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

// ChatCompletionTokenLogprob contains log probability information for a single token.
type ChatCompletionTokenLogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token string.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	// Useful in instances where characters are represented by multiple tokens and
	// their byte representations must be combined to generate the correct text
	// representation. Can be `null` if there is no bytes representation for the token.
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// The log probability of this token, if it is within the top 20 most likely
	// tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
	// unlikely.
	LogProb float64 `protobuf:"fixed64,3,opt,name=log_prob,json=logProb,proto3" json:"log_prob,omitempty"`
	// List of the most likely tokens and their log probability, at this token
	// position. In rare cases, there may be fewer than the number of requested
	// `top_logprobs` returned.
	TopLogProbs []*ChatCompletionTokenLogprobTopLogProb `protobuf:"bytes,4,rep,name=top_log_probs,json=topLogProbs,proto3" json:"top_log_probs,omitempty"`
}

func (x *ChatCompletionTokenLogProb) Reset() {
	*x = ChatCompletionTokenLogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionTokenLogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionTokenLogProb) ProtoMessage() {}

func (x *ChatCompletionTokenLogProb) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionTokenLogProb.ProtoReflect.Descriptor instead.
func (*ChatCompletionTokenLogProb) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{12}
}

func (x *ChatCompletionTokenLogProb) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatCompletionTokenLogProb) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ChatCompletionTokenLogProb) GetLogProb() float64 {
	if x != nil {
		return x.LogProb
	}
	return 0
}

func (x *ChatCompletionTokenLogProb) GetTopLogProbs() []*ChatCompletionTokenLogprobTopLogProb {
	if x != nil {
		return x.TopLogProbs
	}
	return nil
}

// ChatCompletionTokenLogprobTopLogProb represents a top alternative token and its log probability.
type ChatCompletionTokenLogprobTopLogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token string.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	// Useful in instances where characters are represented by multiple tokens and
	// their byte representations must be combined to generate the correct text
	// representation. Can be `null` if there is no bytes representation for the token.
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// The log probability of this token, if it is within the top 20 most likely
	// tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
	// unlikely.
	LogProb float64 `protobuf:"fixed64,3,opt,name=log_prob,json=logProb,proto3" json:"log_prob,omitempty"`
}

func (x *ChatCompletionTokenLogprobTopLogProb) Reset() {
	*x = ChatCompletionTokenLogprobTopLogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionTokenLogprobTopLogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionTokenLogprobTopLogProb) ProtoMessage() {}

func (x *ChatCompletionTokenLogprobTopLogProb) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionTokenLogprobTopLogProb.ProtoReflect.Descriptor instead.
func (*ChatCompletionTokenLogprobTopLogProb) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{13}
}

func (x *ChatCompletionTokenLogprobTopLogProb) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatCompletionTokenLogprobTopLogProb) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ChatCompletionTokenLogprobTopLogProb) GetLogProb() float64 {
	if x != nil {
		return x.LogProb
	}
	return 0
}

// ChatCompletionMessage represents a message in the chat conversation.
type ChatCompletionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ChatCompletionMessage_SystemMessage
	//	*ChatCompletionMessage_UserMessage
	//	*ChatCompletionMessage_AssistantMessage
	//	*ChatCompletionMessage_ToolMessage
	Message isChatCompletionMessage_Message `protobuf_oneof:"message"`
}

func (x *ChatCompletionMessage) Reset() {
	*x = ChatCompletionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessage) ProtoMessage() {}

func (x *ChatCompletionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessage.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{14}
}

func (m *ChatCompletionMessage) GetMessage() isChatCompletionMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ChatCompletionMessage) GetSystemMessage() *ChatCompletionSystemMessage {
	if x, ok := x.GetMessage().(*ChatCompletionMessage_SystemMessage); ok {
		return x.SystemMessage
	}
	return nil
}

func (x *ChatCompletionMessage) GetUserMessage() *ChatCompletionUserMessage {
	if x, ok := x.GetMessage().(*ChatCompletionMessage_UserMessage); ok {
		return x.UserMessage
	}
	return nil
}

func (x *ChatCompletionMessage) GetAssistantMessage() *ChatCompletionAssistantMessage {
	if x, ok := x.GetMessage().(*ChatCompletionMessage_AssistantMessage); ok {
		return x.AssistantMessage
	}
	return nil
}

func (x *ChatCompletionMessage) GetToolMessage() *ChatCompletionToolMessage {
	if x, ok := x.GetMessage().(*ChatCompletionMessage_ToolMessage); ok {
		return x.ToolMessage
	}
	return nil
}

type isChatCompletionMessage_Message interface {
	isChatCompletionMessage_Message()
}

type ChatCompletionMessage_SystemMessage struct {
	SystemMessage *ChatCompletionSystemMessage `protobuf:"bytes,1,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

type ChatCompletionMessage_UserMessage struct {
	UserMessage *ChatCompletionUserMessage `protobuf:"bytes,2,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type ChatCompletionMessage_AssistantMessage struct {
	AssistantMessage *ChatCompletionAssistantMessage `protobuf:"bytes,3,opt,name=assistant_message,json=assistantMessage,proto3,oneof"`
}

type ChatCompletionMessage_ToolMessage struct {
	ToolMessage *ChatCompletionToolMessage `protobuf:"bytes,4,opt,name=tool_message,json=toolMessage,proto3,oneof"`
}

func (*ChatCompletionMessage_SystemMessage) isChatCompletionMessage_Message() {}

func (*ChatCompletionMessage_UserMessage) isChatCompletionMessage_Message() {}

func (*ChatCompletionMessage_AssistantMessage) isChatCompletionMessage_Message() {}

func (*ChatCompletionMessage_ToolMessage) isChatCompletionMessage_Message() {}

// ChatCompletionSystemMessage represents a system message in the chat conversation.
type ChatCompletionSystemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the system message.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The role of the messages author, in this case "system".
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *ChatCompletionSystemMessage) Reset() {
	*x = ChatCompletionSystemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionSystemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionSystemMessage) ProtoMessage() {}

func (x *ChatCompletionSystemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionSystemMessage.ProtoReflect.Descriptor instead.
func (*ChatCompletionSystemMessage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{15}
}

func (x *ChatCompletionSystemMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatCompletionSystemMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionSystemMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ChatCompletionMessageTextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text content.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ChatCompletionMessageTextContent) Reset() {
	*x = ChatCompletionMessageTextContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageTextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageTextContent) ProtoMessage() {}

func (x *ChatCompletionMessageTextContent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageTextContent.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageTextContent) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{16}
}

func (x *ChatCompletionMessageTextContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ChatCompletionMessageMultiContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of content parts with a defined type.
	Parts []*ChatCompletionMessageContentPart `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *ChatCompletionMessageMultiContent) Reset() {
	*x = ChatCompletionMessageMultiContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageMultiContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageMultiContent) ProtoMessage() {}

func (x *ChatCompletionMessageMultiContent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageMultiContent.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageMultiContent) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{17}
}

func (x *ChatCompletionMessageMultiContent) GetParts() []*ChatCompletionMessageContentPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ChatCompletionUserMessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*ChatCompletionUserMessageContent_Text
	//	*ChatCompletionUserMessageContent_Multi
	Content isChatCompletionUserMessageContent_Content `protobuf_oneof:"content"`
}

func (x *ChatCompletionUserMessageContent) Reset() {
	*x = ChatCompletionUserMessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionUserMessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionUserMessageContent) ProtoMessage() {}

func (x *ChatCompletionUserMessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionUserMessageContent.ProtoReflect.Descriptor instead.
func (*ChatCompletionUserMessageContent) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{18}
}

func (m *ChatCompletionUserMessageContent) GetContent() isChatCompletionUserMessageContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChatCompletionUserMessageContent) GetText() *ChatCompletionMessageTextContent {
	if x, ok := x.GetContent().(*ChatCompletionUserMessageContent_Text); ok {
		return x.Text
	}
	return nil
}

func (x *ChatCompletionUserMessageContent) GetMulti() *ChatCompletionMessageMultiContent {
	if x, ok := x.GetContent().(*ChatCompletionUserMessageContent_Multi); ok {
		return x.Multi
	}
	return nil
}

type isChatCompletionUserMessageContent_Content interface {
	isChatCompletionUserMessageContent_Content()
}

type ChatCompletionUserMessageContent_Text struct {
	Text *ChatCompletionMessageTextContent `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type ChatCompletionUserMessageContent_Multi struct {
	Multi *ChatCompletionMessageMultiContent `protobuf:"bytes,2,opt,name=multi,proto3,oneof"`
}

func (*ChatCompletionUserMessageContent_Text) isChatCompletionUserMessageContent_Content() {}

func (*ChatCompletionUserMessageContent_Multi) isChatCompletionUserMessageContent_Content() {}

// ChatCompletionUserMessage represents a user message in the chat conversation.
type ChatCompletionUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the user message.
	Content *ChatCompletionUserMessageContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The role of the messages author, in this case "user".
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *ChatCompletionUserMessage) Reset() {
	*x = ChatCompletionUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionUserMessage) ProtoMessage() {}

func (x *ChatCompletionUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionUserMessage.ProtoReflect.Descriptor instead.
func (*ChatCompletionUserMessage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChatCompletionUserMessage) GetContent() *ChatCompletionUserMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatCompletionUserMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionUserMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// ChatCompletionAssistantMessage represents an assistant message in the chat conversation.
type ChatCompletionAssistantMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The role of the messages author, in this case "assistant".
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The contents of the assistant message.
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The tool calls generated by the model, such as function calls.
	ToolCalls []*ChatCompletionMessageToolCall `protobuf:"bytes,4,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *ChatCompletionAssistantMessage) Reset() {
	*x = ChatCompletionAssistantMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionAssistantMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionAssistantMessage) ProtoMessage() {}

func (x *ChatCompletionAssistantMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionAssistantMessage.ProtoReflect.Descriptor instead.
func (*ChatCompletionAssistantMessage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{20}
}

func (x *ChatCompletionAssistantMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionAssistantMessage) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ChatCompletionAssistantMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChatCompletionAssistantMessage) GetToolCalls() []*ChatCompletionMessageToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

// ChatCompletionToolMessage represents a tool message in the chat conversation.
type ChatCompletionToolMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the tool message.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The role of the messages author, in this case "tool".
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// Tool call that this message is responding to.
	ToolCallId string `protobuf:"bytes,3,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
}

func (x *ChatCompletionToolMessage) Reset() {
	*x = ChatCompletionToolMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionToolMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionToolMessage) ProtoMessage() {}

func (x *ChatCompletionToolMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionToolMessage.ProtoReflect.Descriptor instead.
func (*ChatCompletionToolMessage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{21}
}

func (x *ChatCompletionToolMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatCompletionToolMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionToolMessage) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

// ChatCompletionMessageContentPart represents a part of the message content (text or image).
type ChatCompletionMessageContentPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ChatCompletionMessageContentPart_Text
	//	*ChatCompletionMessageContentPart_Image
	Type isChatCompletionMessageContentPart_Type `protobuf_oneof:"type"`
}

func (x *ChatCompletionMessageContentPart) Reset() {
	*x = ChatCompletionMessageContentPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageContentPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentPart) ProtoMessage() {}

func (x *ChatCompletionMessageContentPart) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentPart.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentPart) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{22}
}

func (m *ChatCompletionMessageContentPart) GetType() isChatCompletionMessageContentPart_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ChatCompletionMessageContentPart) GetText() *ChatCompletionMessageContentPartText {
	if x, ok := x.GetType().(*ChatCompletionMessageContentPart_Text); ok {
		return x.Text
	}
	return nil
}

func (x *ChatCompletionMessageContentPart) GetImage() *ChatCompletionMessageContentPartImage {
	if x, ok := x.GetType().(*ChatCompletionMessageContentPart_Image); ok {
		return x.Image
	}
	return nil
}

type isChatCompletionMessageContentPart_Type interface {
	isChatCompletionMessageContentPart_Type()
}

type ChatCompletionMessageContentPart_Text struct {
	Text *ChatCompletionMessageContentPartText `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type ChatCompletionMessageContentPart_Image struct {
	Image *ChatCompletionMessageContentPartImage `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*ChatCompletionMessageContentPart_Text) isChatCompletionMessageContentPart_Type() {}

func (*ChatCompletionMessageContentPart_Image) isChatCompletionMessageContentPart_Type() {}

// ChatCompletionMessageContentPartText represents a text content part.
type ChatCompletionMessageContentPartText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text content.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ChatCompletionMessageContentPartText) Reset() {
	*x = ChatCompletionMessageContentPartText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageContentPartText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentPartText) ProtoMessage() {}

func (x *ChatCompletionMessageContentPartText) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentPartText.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentPartText) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{23}
}

func (x *ChatCompletionMessageContentPartText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// ChatCompletionMessageContentPartImage represents an image content part.
type ChatCompletionMessageContentPartImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ChatCompletionMessageContentPartImageType `protobuf:"varint,1,opt,name=type,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageType" json:"type,omitempty"`
	// The image URL and optional detail level.
	ImageUrl *ChatCompletionMessageContentPartImageURL `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *ChatCompletionMessageContentPartImage) Reset() {
	*x = ChatCompletionMessageContentPartImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageContentPartImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentPartImage) ProtoMessage() {}

func (x *ChatCompletionMessageContentPartImage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentPartImage.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentPartImage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{24}
}

func (x *ChatCompletionMessageContentPartImage) GetType() ChatCompletionMessageContentPartImageType {
	if x != nil {
		return x.Type
	}
	return ChatCompletionMessageContentPartImageType_ChatCompletionMessageContentPartImageTypeUnspecified
}

func (x *ChatCompletionMessageContentPartImage) GetImageUrl() *ChatCompletionMessageContentPartImageURL {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

// ChatCompletionMessageContentPartImageURL contains the URL and detail level of an image.
type ChatCompletionMessageContentPartImageURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either a URL of the image or the base64 encoded image data.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Specifies the detail level of the image.
	Detail *ChatCompletionMessageContentPartImageDetail `protobuf:"varint,2,opt,name=detail,proto3,enum=apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageDetail,oneof" json:"detail,omitempty"`
}

func (x *ChatCompletionMessageContentPartImageURL) Reset() {
	*x = ChatCompletionMessageContentPartImageURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionMessageContentPartImageURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentPartImageURL) ProtoMessage() {}

func (x *ChatCompletionMessageContentPartImageURL) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentPartImageURL.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentPartImageURL) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{25}
}

func (x *ChatCompletionMessageContentPartImageURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChatCompletionMessageContentPartImageURL) GetDetail() ChatCompletionMessageContentPartImageDetail {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ChatCompletionMessageContentPartImageDetail_ChatCompletionMessageContentPartImageDetailUnspecified
}

// ChatCompletionTool represents a tool that the model can use.
type ChatCompletionTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the tool. Currently, only "function" is supported.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The function definition.
	Function *ChatCompletionFunctionDefinition `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ChatCompletionTool) Reset() {
	*x = ChatCompletionTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionTool) ProtoMessage() {}

func (x *ChatCompletionTool) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionTool.ProtoReflect.Descriptor instead.
func (*ChatCompletionTool) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{26}
}

func (x *ChatCompletionTool) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionTool) GetFunction() *ChatCompletionFunctionDefinition {
	if x != nil {
		return x.Function
	}
	return nil
}

// ChatCompletionFunctionDefinition defines a function that the model can call.
type ChatCompletionFunctionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
	// underscores and dashes, with a maximum length of 64.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description of what the function does, used by the model to choose when and
	// how to call the function.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The parameters the functions accepts, described as a JSON Schema object. See the
	// [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
	// and the
	// [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
	// documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters string `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ChatCompletionFunctionDefinition) Reset() {
	*x = ChatCompletionFunctionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionFunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionFunctionDefinition) ProtoMessage() {}

func (x *ChatCompletionFunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionFunctionDefinition.ProtoReflect.Descriptor instead.
func (*ChatCompletionFunctionDefinition) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{27}
}

func (x *ChatCompletionFunctionDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatCompletionFunctionDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChatCompletionFunctionDefinition) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

type ChatCompletionToolChoiceOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the tool choice. Currently, only "none", "auto", "required", and "named" are supported.
	Option string `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	// The named tool choice.
	ToolChoice *ChatCompletionNamedToolChoice `protobuf:"bytes,2,opt,name=tool_choice,json=toolChoice,proto3" json:"tool_choice,omitempty"`
}

func (x *ChatCompletionToolChoiceOption) Reset() {
	*x = ChatCompletionToolChoiceOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionToolChoiceOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionToolChoiceOption) ProtoMessage() {}

func (x *ChatCompletionToolChoiceOption) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionToolChoiceOption.ProtoReflect.Descriptor instead.
func (*ChatCompletionToolChoiceOption) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{28}
}

func (x *ChatCompletionToolChoiceOption) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

func (x *ChatCompletionToolChoiceOption) GetToolChoice() *ChatCompletionNamedToolChoice {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

// ChatCompletionNamedToolChoice specifies a tool the model should use.
type ChatCompletionNamedToolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the tool. Currently, only "function" is supported.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The function to call.
	Function *ChatCompletionNamedToolChoiceFunction `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ChatCompletionNamedToolChoice) Reset() {
	*x = ChatCompletionNamedToolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionNamedToolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionNamedToolChoice) ProtoMessage() {}

func (x *ChatCompletionNamedToolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionNamedToolChoice.ProtoReflect.Descriptor instead.
func (*ChatCompletionNamedToolChoice) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{29}
}

func (x *ChatCompletionNamedToolChoice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionNamedToolChoice) GetFunction() *ChatCompletionNamedToolChoiceFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

// ChatCompletionNamedToolChoiceFunction specifies the function to call.
type ChatCompletionNamedToolChoiceFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the function to call.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChatCompletionNamedToolChoiceFunction) Reset() {
	*x = ChatCompletionNamedToolChoiceFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionNamedToolChoiceFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionNamedToolChoiceFunction) ProtoMessage() {}

func (x *ChatCompletionNamedToolChoiceFunction) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionNamedToolChoiceFunction.ProtoReflect.Descriptor instead.
func (*ChatCompletionNamedToolChoiceFunction) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{30}
}

func (x *ChatCompletionNamedToolChoiceFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ChatCompletionResponseFormatText specifies the desired response format.
type ChatCompletionResponseFormatText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the response format. Must be "text".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChatCompletionResponseFormatText) Reset() {
	*x = ChatCompletionResponseFormatText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponseFormatText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseFormatText) ProtoMessage() {}

func (x *ChatCompletionResponseFormatText) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseFormatText.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseFormatText) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{31}
}

func (x *ChatCompletionResponseFormatText) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// ChatCompletionResponseFormatJsonObject specifies the desired response format.
type ChatCompletionResponseFormatJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the response format. Must be "json_object".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChatCompletionResponseFormatJsonObject) Reset() {
	*x = ChatCompletionResponseFormatJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponseFormatJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseFormatJsonObject) ProtoMessage() {}

func (x *ChatCompletionResponseFormatJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseFormatJsonObject.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseFormatJsonObject) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{32}
}

func (x *ChatCompletionResponseFormatJsonObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ChatCompletionResponseFormatJsonSchemaJsonSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Schema      string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Strict      bool   `protobuf:"varint,4,opt,name=strict,proto3" json:"strict,omitempty"`
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) Reset() {
	*x = ChatCompletionResponseFormatJsonSchemaJsonSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseFormatJsonSchemaJsonSchema) ProtoMessage() {}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseFormatJsonSchemaJsonSchema.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseFormatJsonSchemaJsonSchema) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{33}
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ChatCompletionResponseFormatJsonSchemaJsonSchema) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

// ChatCompletionResponseFormatJsonSchema specifies the desired response format.
type ChatCompletionResponseFormatJsonSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the response format. Must be "json_schema".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The JSON schema for the response.
	JsonSchema *ChatCompletionResponseFormatJsonSchemaJsonSchema `protobuf:"bytes,2,opt,name=json_schema,json=jsonSchema,proto3" json:"json_schema,omitempty"`
}

func (x *ChatCompletionResponseFormatJsonSchema) Reset() {
	*x = ChatCompletionResponseFormatJsonSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponseFormatJsonSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseFormatJsonSchema) ProtoMessage() {}

func (x *ChatCompletionResponseFormatJsonSchema) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseFormatJsonSchema.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseFormatJsonSchema) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{34}
}

func (x *ChatCompletionResponseFormatJsonSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionResponseFormatJsonSchema) GetJsonSchema() *ChatCompletionResponseFormatJsonSchemaJsonSchema {
	if x != nil {
		return x.JsonSchema
	}
	return nil
}

// ChatCompletionResponseFormat specifies the desired response format.
type ChatCompletionResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ChatCompletionResponseFormat_Text
	//	*ChatCompletionResponseFormat_JsonObject
	//	*ChatCompletionResponseFormat_JsonSchema
	Type isChatCompletionResponseFormat_Type `protobuf_oneof:"type"`
}

func (x *ChatCompletionResponseFormat) Reset() {
	*x = ChatCompletionResponseFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseFormat) ProtoMessage() {}

func (x *ChatCompletionResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseFormat.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseFormat) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{35}
}

func (m *ChatCompletionResponseFormat) GetType() isChatCompletionResponseFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ChatCompletionResponseFormat) GetText() *ChatCompletionResponseFormatText {
	if x, ok := x.GetType().(*ChatCompletionResponseFormat_Text); ok {
		return x.Text
	}
	return nil
}

func (x *ChatCompletionResponseFormat) GetJsonObject() *ChatCompletionResponseFormatJsonObject {
	if x, ok := x.GetType().(*ChatCompletionResponseFormat_JsonObject); ok {
		return x.JsonObject
	}
	return nil
}

func (x *ChatCompletionResponseFormat) GetJsonSchema() *ChatCompletionResponseFormatJsonSchema {
	if x, ok := x.GetType().(*ChatCompletionResponseFormat_JsonSchema); ok {
		return x.JsonSchema
	}
	return nil
}

type isChatCompletionResponseFormat_Type interface {
	isChatCompletionResponseFormat_Type()
}

type ChatCompletionResponseFormat_Text struct {
	Text *ChatCompletionResponseFormatText `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type ChatCompletionResponseFormat_JsonObject struct {
	JsonObject *ChatCompletionResponseFormatJsonObject `protobuf:"bytes,2,opt,name=json_object,json=jsonObject,proto3,oneof"`
}

type ChatCompletionResponseFormat_JsonSchema struct {
	JsonSchema *ChatCompletionResponseFormatJsonSchema `protobuf:"bytes,3,opt,name=json_schema,json=jsonSchema,proto3,oneof"`
}

func (*ChatCompletionResponseFormat_Text) isChatCompletionResponseFormat_Type() {}

func (*ChatCompletionResponseFormat_JsonObject) isChatCompletionResponseFormat_Type() {}

func (*ChatCompletionResponseFormat_JsonSchema) isChatCompletionResponseFormat_Type() {}

// ChatCompletionUsage provides token usage information for a completion request.
type ChatCompletionUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of tokens in the prompt.
	PromptTokens int64 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// Number of tokens in the generated completion.
	CompletionTokens int64 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	// Total number of tokens used in the request (prompt + completion).
	TotalTokens int64 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
}

func (x *ChatCompletionUsage) Reset() {
	*x = ChatCompletionUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionUsage) ProtoMessage() {}

func (x *ChatCompletionUsage) ProtoReflect() protoreflect.Message {
	mi := &file_apis_llmgapi_v1_openai_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionUsage.ProtoReflect.Descriptor instead.
func (*ChatCompletionUsage) Descriptor() ([]byte, []int) {
	return file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP(), []int{36}
}

func (x *ChatCompletionUsage) GetPromptTokens() int64 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *ChatCompletionUsage) GetCompletionTokens() int64 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *ChatCompletionUsage) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

var File_apis_llmgapi_v1_openai_service_proto protoreflect.FileDescriptor

var file_apis_llmgapi_v1_openai_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d,
	0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa4, 0x0a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x61, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c,
	0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x04, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d,
	0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x07, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x0b, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x0c, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42,
	0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6e, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0xa4, 0x0b, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x67, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x62, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x07,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x5f, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c,
	0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0b, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0c, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0e, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f,
	0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x04, 0x0a,
	0x02, 0x5f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x59, 0x0a,
	0x1b, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4,
	0x02, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c,
	0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c,
	0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9e, 0x02, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x59, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xee, 0x03, 0x0a, 0x22,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x02,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x02, 0x0a,
	0x19, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a,
	0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f,
	0x62, 0x12, 0x60, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x54, 0x6f, 0x70, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x22, 0x6d, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x22, 0x97, 0x03, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x1b,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x20, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x21, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0xd0,
	0x01, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x1e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0xd5, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x55,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x28, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x60, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x7e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x78, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d,
	0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b,
	0x0a, 0x25, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x20, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x26, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x30, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4a, 0x73, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0xa7, 0x01, 0x0a,
	0x26, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xbc, 0x02, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d,
	0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x61, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x61, 0x0a, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48,
	0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2a, 0x8f, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x02, 0x2a, 0xb7, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x10,
	0x03, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x2a,
	0x0a, 0x26, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x06, 0x2a, 0x84,
	0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x97, 0x01, 0x0a, 0x29, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x34, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x30, 0x0a,
	0x2c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x52, 0x4c, 0x10, 0x01, 0x2a,
	0x87, 0x02, 0x0a, 0x2b, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3a, 0x0a, 0x36, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x01,
	0x12, 0x32, 0x0a, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x6f, 0x77, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x03, 0x32, 0xab, 0x02, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x95, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x63, 0x69, 0x6f, 0x2f,
	0x6c, 0x6c, 0x6d, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x6c, 0x6d, 0x67, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_apis_llmgapi_v1_openai_service_proto_rawDescOnce sync.Once
	file_apis_llmgapi_v1_openai_service_proto_rawDescData = file_apis_llmgapi_v1_openai_service_proto_rawDesc
)

func file_apis_llmgapi_v1_openai_service_proto_rawDescGZIP() []byte {
	file_apis_llmgapi_v1_openai_service_proto_rawDescOnce.Do(func() {
		file_apis_llmgapi_v1_openai_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_llmgapi_v1_openai_service_proto_rawDescData)
	})
	return file_apis_llmgapi_v1_openai_service_proto_rawDescData
}

var file_apis_llmgapi_v1_openai_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_apis_llmgapi_v1_openai_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_apis_llmgapi_v1_openai_service_proto_goTypes = []interface{}{
	(ChatCompletionServiceTier)(0),                           // 0: apis.llmgapi.v1.openai.ChatCompletionServiceTier
	(ChatCompletionFinishReason)(0),                          // 1: apis.llmgapi.v1.openai.ChatCompletionFinishReason
	(ChatCompletionMessageToolCallType)(0),                   // 2: apis.llmgapi.v1.openai.ChatCompletionMessageToolCallType
	(ChatCompletionMessageContentPartImageType)(0),           // 3: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageType
	(ChatCompletionMessageContentPartImageDetail)(0),         // 4: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageDetail
	(*CreateChatCompletionRequest)(nil),                      // 5: apis.llmgapi.v1.openai.CreateChatCompletionRequest
	(*CreateChatCompletionStreamRequest)(nil),                // 6: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest
	(*ChatCompletionStreamOptions)(nil),                      // 7: apis.llmgapi.v1.openai.ChatCompletionStreamOptions
	(*CreateChatCompletionResponse)(nil),                     // 8: apis.llmgapi.v1.openai.CreateChatCompletionResponse
	(*ChatCompletionChoice)(nil),                             // 9: apis.llmgapi.v1.openai.ChatCompletionChoice
	(*ChatCompletionChoiceLogProbs)(nil),                     // 10: apis.llmgapi.v1.openai.ChatCompletionChoiceLogProbs
	(*ChatCompletionMessageToolCall)(nil),                    // 11: apis.llmgapi.v1.openai.ChatCompletionMessageToolCall
	(*ChatCompletionChunkDeltaToolCall)(nil),                 // 12: apis.llmgapi.v1.openai.ChatCompletionChunkDeltaToolCall
	(*ChatCompletionMessageToolCallFunction)(nil),            // 13: apis.llmgapi.v1.openai.ChatCompletionMessageToolCallFunction
	(*CreateChatCompletionStreamResponse)(nil),               // 14: apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse
	(*ChatCompletionChunkChoice)(nil),                        // 15: apis.llmgapi.v1.openai.ChatCompletionChunkChoice
	(*ChatCompletionChunkChoiceDelta)(nil),                   // 16: apis.llmgapi.v1.openai.ChatCompletionChunkChoiceDelta
	(*ChatCompletionTokenLogProb)(nil),                       // 17: apis.llmgapi.v1.openai.ChatCompletionTokenLogProb
	(*ChatCompletionTokenLogprobTopLogProb)(nil),             // 18: apis.llmgapi.v1.openai.ChatCompletionTokenLogprobTopLogProb
	(*ChatCompletionMessage)(nil),                            // 19: apis.llmgapi.v1.openai.ChatCompletionMessage
	(*ChatCompletionSystemMessage)(nil),                      // 20: apis.llmgapi.v1.openai.ChatCompletionSystemMessage
	(*ChatCompletionMessageTextContent)(nil),                 // 21: apis.llmgapi.v1.openai.ChatCompletionMessageTextContent
	(*ChatCompletionMessageMultiContent)(nil),                // 22: apis.llmgapi.v1.openai.ChatCompletionMessageMultiContent
	(*ChatCompletionUserMessageContent)(nil),                 // 23: apis.llmgapi.v1.openai.ChatCompletionUserMessageContent
	(*ChatCompletionUserMessage)(nil),                        // 24: apis.llmgapi.v1.openai.ChatCompletionUserMessage
	(*ChatCompletionAssistantMessage)(nil),                   // 25: apis.llmgapi.v1.openai.ChatCompletionAssistantMessage
	(*ChatCompletionToolMessage)(nil),                        // 26: apis.llmgapi.v1.openai.ChatCompletionToolMessage
	(*ChatCompletionMessageContentPart)(nil),                 // 27: apis.llmgapi.v1.openai.ChatCompletionMessageContentPart
	(*ChatCompletionMessageContentPartText)(nil),             // 28: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartText
	(*ChatCompletionMessageContentPartImage)(nil),            // 29: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImage
	(*ChatCompletionMessageContentPartImageURL)(nil),         // 30: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageURL
	(*ChatCompletionTool)(nil),                               // 31: apis.llmgapi.v1.openai.ChatCompletionTool
	(*ChatCompletionFunctionDefinition)(nil),                 // 32: apis.llmgapi.v1.openai.ChatCompletionFunctionDefinition
	(*ChatCompletionToolChoiceOption)(nil),                   // 33: apis.llmgapi.v1.openai.ChatCompletionToolChoiceOption
	(*ChatCompletionNamedToolChoice)(nil),                    // 34: apis.llmgapi.v1.openai.ChatCompletionNamedToolChoice
	(*ChatCompletionNamedToolChoiceFunction)(nil),            // 35: apis.llmgapi.v1.openai.ChatCompletionNamedToolChoiceFunction
	(*ChatCompletionResponseFormatText)(nil),                 // 36: apis.llmgapi.v1.openai.ChatCompletionResponseFormatText
	(*ChatCompletionResponseFormatJsonObject)(nil),           // 37: apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonObject
	(*ChatCompletionResponseFormatJsonSchemaJsonSchema)(nil), // 38: apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonSchemaJsonSchema
	(*ChatCompletionResponseFormatJsonSchema)(nil),           // 39: apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonSchema
	(*ChatCompletionResponseFormat)(nil),                     // 40: apis.llmgapi.v1.openai.ChatCompletionResponseFormat
	(*ChatCompletionUsage)(nil),                              // 41: apis.llmgapi.v1.openai.ChatCompletionUsage
	nil,                                                      // 42: apis.llmgapi.v1.openai.CreateChatCompletionRequest.LogitBiasEntry
	nil,                                                      // 43: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.LogitBiasEntry
	(*timestamppb.Timestamp)(nil),                            // 44: google.protobuf.Timestamp
}
var file_apis_llmgapi_v1_openai_service_proto_depIdxs = []int32{
	19, // 0: apis.llmgapi.v1.openai.CreateChatCompletionRequest.messages:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessage
	42, // 1: apis.llmgapi.v1.openai.CreateChatCompletionRequest.logit_bias:type_name -> apis.llmgapi.v1.openai.CreateChatCompletionRequest.LogitBiasEntry
	40, // 2: apis.llmgapi.v1.openai.CreateChatCompletionRequest.response_format:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormat
	0,  // 3: apis.llmgapi.v1.openai.CreateChatCompletionRequest.service_tier:type_name -> apis.llmgapi.v1.openai.ChatCompletionServiceTier
	33, // 4: apis.llmgapi.v1.openai.CreateChatCompletionRequest.tool_choice:type_name -> apis.llmgapi.v1.openai.ChatCompletionToolChoiceOption
	31, // 5: apis.llmgapi.v1.openai.CreateChatCompletionRequest.tools:type_name -> apis.llmgapi.v1.openai.ChatCompletionTool
	19, // 6: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.messages:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessage
	43, // 7: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.logit_bias:type_name -> apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.LogitBiasEntry
	40, // 8: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.response_format:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormat
	0,  // 9: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.service_tier:type_name -> apis.llmgapi.v1.openai.ChatCompletionServiceTier
	7,  // 10: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.stream_options:type_name -> apis.llmgapi.v1.openai.ChatCompletionStreamOptions
	33, // 11: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.tool_choice:type_name -> apis.llmgapi.v1.openai.ChatCompletionToolChoiceOption
	31, // 12: apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest.tools:type_name -> apis.llmgapi.v1.openai.ChatCompletionTool
	9,  // 13: apis.llmgapi.v1.openai.CreateChatCompletionResponse.choices:type_name -> apis.llmgapi.v1.openai.ChatCompletionChoice
	44, // 14: apis.llmgapi.v1.openai.CreateChatCompletionResponse.created:type_name -> google.protobuf.Timestamp
	0,  // 15: apis.llmgapi.v1.openai.CreateChatCompletionResponse.service_tier:type_name -> apis.llmgapi.v1.openai.ChatCompletionServiceTier
	41, // 16: apis.llmgapi.v1.openai.CreateChatCompletionResponse.usage:type_name -> apis.llmgapi.v1.openai.ChatCompletionUsage
	1,  // 17: apis.llmgapi.v1.openai.ChatCompletionChoice.finish_reason:type_name -> apis.llmgapi.v1.openai.ChatCompletionFinishReason
	10, // 18: apis.llmgapi.v1.openai.ChatCompletionChoice.log_probs:type_name -> apis.llmgapi.v1.openai.ChatCompletionChoiceLogProbs
	19, // 19: apis.llmgapi.v1.openai.ChatCompletionChoice.message:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessage
	17, // 20: apis.llmgapi.v1.openai.ChatCompletionChoiceLogProbs.content:type_name -> apis.llmgapi.v1.openai.ChatCompletionTokenLogProb
	2,  // 21: apis.llmgapi.v1.openai.ChatCompletionMessageToolCall.type:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageToolCallType
	13, // 22: apis.llmgapi.v1.openai.ChatCompletionMessageToolCall.function:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageToolCallFunction
	13, // 23: apis.llmgapi.v1.openai.ChatCompletionChunkDeltaToolCall.function:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageToolCallFunction
	2,  // 24: apis.llmgapi.v1.openai.ChatCompletionChunkDeltaToolCall.type:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageToolCallType
	15, // 25: apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse.choices:type_name -> apis.llmgapi.v1.openai.ChatCompletionChunkChoice
	44, // 26: apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse.created:type_name -> google.protobuf.Timestamp
	0,  // 27: apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse.service_tier:type_name -> apis.llmgapi.v1.openai.ChatCompletionServiceTier
	41, // 28: apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse.usage:type_name -> apis.llmgapi.v1.openai.ChatCompletionUsage
	16, // 29: apis.llmgapi.v1.openai.ChatCompletionChunkChoice.delta:type_name -> apis.llmgapi.v1.openai.ChatCompletionChunkChoiceDelta
	1,  // 30: apis.llmgapi.v1.openai.ChatCompletionChunkChoice.finish_reason:type_name -> apis.llmgapi.v1.openai.ChatCompletionFinishReason
	10, // 31: apis.llmgapi.v1.openai.ChatCompletionChunkChoice.logprobs:type_name -> apis.llmgapi.v1.openai.ChatCompletionChoiceLogProbs
	12, // 32: apis.llmgapi.v1.openai.ChatCompletionChunkChoiceDelta.tool_calls:type_name -> apis.llmgapi.v1.openai.ChatCompletionChunkDeltaToolCall
	18, // 33: apis.llmgapi.v1.openai.ChatCompletionTokenLogProb.top_log_probs:type_name -> apis.llmgapi.v1.openai.ChatCompletionTokenLogprobTopLogProb
	20, // 34: apis.llmgapi.v1.openai.ChatCompletionMessage.system_message:type_name -> apis.llmgapi.v1.openai.ChatCompletionSystemMessage
	24, // 35: apis.llmgapi.v1.openai.ChatCompletionMessage.user_message:type_name -> apis.llmgapi.v1.openai.ChatCompletionUserMessage
	25, // 36: apis.llmgapi.v1.openai.ChatCompletionMessage.assistant_message:type_name -> apis.llmgapi.v1.openai.ChatCompletionAssistantMessage
	26, // 37: apis.llmgapi.v1.openai.ChatCompletionMessage.tool_message:type_name -> apis.llmgapi.v1.openai.ChatCompletionToolMessage
	27, // 38: apis.llmgapi.v1.openai.ChatCompletionMessageMultiContent.parts:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPart
	21, // 39: apis.llmgapi.v1.openai.ChatCompletionUserMessageContent.text:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageTextContent
	22, // 40: apis.llmgapi.v1.openai.ChatCompletionUserMessageContent.multi:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageMultiContent
	23, // 41: apis.llmgapi.v1.openai.ChatCompletionUserMessage.content:type_name -> apis.llmgapi.v1.openai.ChatCompletionUserMessageContent
	11, // 42: apis.llmgapi.v1.openai.ChatCompletionAssistantMessage.tool_calls:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageToolCall
	28, // 43: apis.llmgapi.v1.openai.ChatCompletionMessageContentPart.text:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPartText
	29, // 44: apis.llmgapi.v1.openai.ChatCompletionMessageContentPart.image:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImage
	3,  // 45: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImage.type:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageType
	30, // 46: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImage.image_url:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageURL
	4,  // 47: apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageURL.detail:type_name -> apis.llmgapi.v1.openai.ChatCompletionMessageContentPartImageDetail
	32, // 48: apis.llmgapi.v1.openai.ChatCompletionTool.function:type_name -> apis.llmgapi.v1.openai.ChatCompletionFunctionDefinition
	34, // 49: apis.llmgapi.v1.openai.ChatCompletionToolChoiceOption.tool_choice:type_name -> apis.llmgapi.v1.openai.ChatCompletionNamedToolChoice
	35, // 50: apis.llmgapi.v1.openai.ChatCompletionNamedToolChoice.function:type_name -> apis.llmgapi.v1.openai.ChatCompletionNamedToolChoiceFunction
	38, // 51: apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonSchema.json_schema:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonSchemaJsonSchema
	36, // 52: apis.llmgapi.v1.openai.ChatCompletionResponseFormat.text:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormatText
	37, // 53: apis.llmgapi.v1.openai.ChatCompletionResponseFormat.json_object:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonObject
	39, // 54: apis.llmgapi.v1.openai.ChatCompletionResponseFormat.json_schema:type_name -> apis.llmgapi.v1.openai.ChatCompletionResponseFormatJsonSchema
	5,  // 55: apis.llmgapi.v1.openai.OpenAIService.CreateChatCompletion:input_type -> apis.llmgapi.v1.openai.CreateChatCompletionRequest
	6,  // 56: apis.llmgapi.v1.openai.OpenAIService.CreateChatCompletionStream:input_type -> apis.llmgapi.v1.openai.CreateChatCompletionStreamRequest
	8,  // 57: apis.llmgapi.v1.openai.OpenAIService.CreateChatCompletion:output_type -> apis.llmgapi.v1.openai.CreateChatCompletionResponse
	14, // 58: apis.llmgapi.v1.openai.OpenAIService.CreateChatCompletionStream:output_type -> apis.llmgapi.v1.openai.CreateChatCompletionStreamResponse
	57, // [57:59] is the sub-list for method output_type
	55, // [55:57] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_apis_llmgapi_v1_openai_service_proto_init() }
func file_apis_llmgapi_v1_openai_service_proto_init() {
	if File_apis_llmgapi_v1_openai_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionStreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChoiceLogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunkDeltaToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageToolCallFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunkChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunkChoiceDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionTokenLogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionTokenLogprobTopLogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionSystemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageTextContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageMultiContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionUserMessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionAssistantMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionToolMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageContentPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageContentPartText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageContentPartImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionMessageContentPartImageURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionFunctionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionToolChoiceOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionNamedToolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionNamedToolChoiceFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponseFormatText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponseFormatJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponseFormatJsonSchemaJsonSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponseFormatJsonSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponseFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_llmgapi_v1_openai_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ChatCompletionMessage_SystemMessage)(nil),
		(*ChatCompletionMessage_UserMessage)(nil),
		(*ChatCompletionMessage_AssistantMessage)(nil),
		(*ChatCompletionMessage_ToolMessage)(nil),
	}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ChatCompletionUserMessageContent_Text)(nil),
		(*ChatCompletionUserMessageContent_Multi)(nil),
	}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ChatCompletionMessageContentPart_Text)(nil),
		(*ChatCompletionMessageContentPart_Image)(nil),
	}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_apis_llmgapi_v1_openai_service_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*ChatCompletionResponseFormat_Text)(nil),
		(*ChatCompletionResponseFormat_JsonObject)(nil),
		(*ChatCompletionResponseFormat_JsonSchema)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_llmgapi_v1_openai_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apis_llmgapi_v1_openai_service_proto_goTypes,
		DependencyIndexes: file_apis_llmgapi_v1_openai_service_proto_depIdxs,
		EnumInfos:         file_apis_llmgapi_v1_openai_service_proto_enumTypes,
		MessageInfos:      file_apis_llmgapi_v1_openai_service_proto_msgTypes,
	}.Build()
	File_apis_llmgapi_v1_openai_service_proto = out.File
	file_apis_llmgapi_v1_openai_service_proto_rawDesc = nil
	file_apis_llmgapi_v1_openai_service_proto_goTypes = nil
	file_apis_llmgapi_v1_openai_service_proto_depIdxs = nil
}
